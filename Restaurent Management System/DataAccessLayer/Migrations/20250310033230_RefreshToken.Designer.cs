// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PMSData;

#nullable disable

namespace PMSData.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250310033230_RefreshToken")]
    partial class RefreshToken
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PMSData.AuditLog", b =>
                {
                    b.Property<int>("KotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("kot_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("KotId"));

                    b.Property<TimeOnly>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("time without time zone")
                        .HasColumnName("createAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CretaeBy")
                        .HasColumnType("integer")
                        .HasColumnName("cretaeBy");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("isActive")
                        .HasDefaultValueSql("true");

                    b.Property<bool>("IsPrepared")
                        .HasColumnType("boolean")
                        .HasColumnName("isPrepared");

                    b.Property<TimeOnly?>("ModifyAt")
                        .HasColumnType("time without time zone")
                        .HasColumnName("modifyAt");

                    b.Property<int?>("ModifyBy")
                        .HasColumnType("integer")
                        .HasColumnName("modifyBy");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.HasKey("KotId")
                        .HasName("audit_logs_pkey");

                    b.HasIndex("CretaeBy");

                    b.HasIndex("ModifyBy");

                    b.ToTable("audit_logs");
                });

            modelBuilder.Entity("PMSData.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("category_name");

                    b.Property<DateTime>("Createat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Createby")
                        .HasColumnType("integer")
                        .HasColumnName("createby");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool?>("Isactive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("isactive")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("Modifyat")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modifyat");

                    b.Property<int?>("Modifyby")
                        .HasColumnType("integer")
                        .HasColumnName("modifyby");

                    b.HasKey("CategoryId")
                        .HasName("categories_pkey");

                    b.HasIndex("Createby");

                    b.HasIndex("Modifyby");

                    b.HasIndex(new[] { "CategoryName" }, "categories_category_name_key")
                        .IsUnique();

                    b.ToTable("categories");
                });

            modelBuilder.Entity("PMSData.CityList", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("city_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CityId"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("city_name");

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer")
                        .HasColumnName("createBY");

                    b.Property<TimeOnly>("CretateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("time without time zone")
                        .HasColumnName("cretateAT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool?>("Isactive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("isactive")
                        .HasDefaultValueSql("true");

                    b.Property<TimeOnly?>("ModifyAt")
                        .HasColumnType("time without time zone")
                        .HasColumnName("modifyAT");

                    b.Property<int?>("ModifyBy")
                        .HasColumnType("integer")
                        .HasColumnName("modifyBY");

                    b.Property<int>("StateId")
                        .HasColumnType("integer")
                        .HasColumnName("state_id");

                    b.HasKey("CityId")
                        .HasName("city_list_pkey");

                    b.HasIndex("CreateBy");

                    b.HasIndex("ModifyBy");

                    b.HasIndex("StateId");

                    b.ToTable("city_list");
                });

            modelBuilder.Entity("PMSData.ContryList", b =>
                {
                    b.Property<int>("ContryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("contry_id")
                        .HasDefaultValueSql("nextval('\"Contry_list_contry_id_seq\"'::regclass)");

                    b.Property<string>("ContryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("contry_name");

                    b.Property<TimeOnly>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("time without time zone")
                        .HasColumnName("createAT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer")
                        .HasColumnName("CreateBY");

                    b.Property<bool?>("IsContinue")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<TimeOnly?>("ModifyAt")
                        .HasColumnType("time without time zone")
                        .HasColumnName("modifyAt");

                    b.Property<int?>("ModifyBy")
                        .HasColumnType("integer")
                        .HasColumnName("modifyBY");

                    b.HasKey("ContryId")
                        .HasName("Contry_list_pkey");

                    b.HasIndex("CreateBy");

                    b.HasIndex("ModifyBy");

                    b.ToTable("contry_list");
                });

            modelBuilder.Entity("PMSData.Customer", b =>
                {
                    b.Property<int>("CustId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cust_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CustId"));

                    b.Property<DateTime>("Createat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CustName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("cust_name");

                    b.Property<string>("EmailId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email_id");

                    b.Property<bool>("Iscontinued")
                        .HasColumnType("boolean")
                        .HasColumnName("iscontinued");

                    b.Property<DateTime?>("Modifyat")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modifyat");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("phone_number");

                    b.Property<int>("TotalOrders")
                        .HasColumnType("integer")
                        .HasColumnName("total_orders");

                    b.HasKey("CustId")
                        .HasName("customers_pkey");

                    b.HasIndex(new[] { "EmailId" }, "customers_email_id_key")
                        .IsUnique();

                    b.HasIndex(new[] { "PhoneNumber" }, "customers_phone_number_key")
                        .IsUnique();

                    b.HasIndex(new[] { "EmailId" }, "idx_customers_email");

                    b.ToTable("customers");
                });

            modelBuilder.Entity("PMSData.FavoritesItem", b =>
                {
                    b.Property<int>("FiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("fi_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FiId"));

                    b.Property<DateTime>("Createdat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool?>("Isactive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("isactive")
                        .HasDefaultValueSql("true");

                    b.Property<int?>("ItemId")
                        .HasColumnType("integer")
                        .HasColumnName("item_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("FiId")
                        .HasName("favorites_items_pkey");

                    b.HasIndex("ItemId");

                    b.HasIndex("UserId");

                    b.ToTable("favorites_items");
                });

            modelBuilder.Entity("PMSData.FeedbackForm", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("feedback_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FeedbackId"));

                    b.Property<short?>("AmbianceRating")
                        .HasColumnType("smallint")
                        .HasColumnName("ambiance_rating");

                    b.Property<DateTime>("Createdat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("FeedbackDescription")
                        .HasColumnType("text")
                        .HasColumnName("feedback_description");

                    b.Property<short?>("FoodRating")
                        .HasColumnType("smallint")
                        .HasColumnName("food_rating");

                    b.Property<bool>("Isresolved")
                        .HasColumnType("boolean")
                        .HasColumnName("isresolved");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<short?>("ServiceRating")
                        .HasColumnType("smallint")
                        .HasColumnName("service_rating");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("FeedbackId")
                        .HasName("feedback_form_pkey");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("feedback_form");
                });

            modelBuilder.Entity("PMSData.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("invoice_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InvoiceId"));

                    b.Property<TimeOnly>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("time without time zone")
                        .HasColumnName("createAt")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer")
                        .HasColumnName("createBy");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("invoice_number");

                    b.Property<bool?>("Isactive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("isactive")
                        .HasDefaultValueSql("true");

                    b.Property<TimeOnly?>("ModifyAt")
                        .HasColumnType("time without time zone")
                        .HasColumnName("modifyAt");

                    b.Property<int?>("ModifyBy")
                        .HasColumnType("integer")
                        .HasColumnName("modifyBy");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<decimal>("TaxAmount")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)")
                        .HasColumnName("tax_amount");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)")
                        .HasColumnName("total_amount");

                    b.HasKey("InvoiceId")
                        .HasName("invoices_pkey");

                    b.HasIndex("CreateBy");

                    b.HasIndex("ModifyBy");

                    b.HasIndex("OrderId");

                    b.ToTable("invoices");
                });

            modelBuilder.Entity("PMSData.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("item_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ItemId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("Createat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Createby")
                        .HasColumnType("integer")
                        .HasColumnName("createby");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_available");

                    b.Property<bool?>("IsDefaultTax")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("IsDefaultTAX")
                        .HasDefaultValueSql("true");

                    b.Property<bool?>("Isactive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("isactive")
                        .HasDefaultValueSql("true");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("item_name");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("item_type");

                    b.Property<DateTime?>("Modifyat")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modifyat");

                    b.Property<int?>("Modifyby")
                        .HasColumnType("integer")
                        .HasColumnName("modifyby");

                    b.Property<byte[]>("PhotoData")
                        .HasColumnType("bytea")
                        .HasColumnName("photo_data");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<string>("ShortCode")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("short_Code");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)")
                        .HasColumnName("unit_price");

                    b.Property<string>("UnitType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("unit_type");

                    b.HasKey("ItemId")
                        .HasName("items_pkey");

                    b.HasIndex("Createby");

                    b.HasIndex("Modifyby");

                    b.HasIndex(new[] { "CategoryId", "ItemName" }, "unique_item_name_per_category")
                        .IsUnique();

                    b.ToTable("items");
                });

            modelBuilder.Entity("PMSData.ItemModifier", b =>
                {
                    b.Property<int>("ImId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("im_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ImId"));

                    b.Property<int>("ItemId")
                        .HasColumnType("integer")
                        .HasColumnName("item_id");

                    b.Property<int>("MId")
                        .HasColumnType("integer")
                        .HasColumnName("m_id");

                    b.HasKey("ImId")
                        .HasName("item_modifiers_pkey");

                    b.HasIndex("MId");

                    b.HasIndex(new[] { "ItemId", "MId" }, "item_modifiers_item_id_m_id_key")
                        .IsUnique();

                    b.ToTable("item_modifiers");
                });

            modelBuilder.Entity("PMSData.Modifier", b =>
                {
                    b.Property<int>("MId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("m_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MId"));

                    b.Property<DateTime>("Createat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Createby")
                        .HasColumnType("integer")
                        .HasColumnName("createby");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool?>("Isactive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("isactive")
                        .HasDefaultValueSql("true");

                    b.Property<string>("MName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("m_name");

                    b.Property<int>("MgId")
                        .HasColumnType("integer")
                        .HasColumnName("mg_id");

                    b.Property<DateTime?>("Modifyat")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modifyat");

                    b.Property<int?>("Modifyby")
                        .HasColumnType("integer")
                        .HasColumnName("modifyby");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)")
                        .HasColumnName("unit_price");

                    b.Property<string>("UnitType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("unit_type");

                    b.HasKey("MId")
                        .HasName("modifiers_pkey");

                    b.HasIndex("Createby");

                    b.HasIndex("MgId");

                    b.HasIndex("Modifyby");

                    b.ToTable("modifiers");
                });

            modelBuilder.Entity("PMSData.ModifiersGroup", b =>
                {
                    b.Property<int>("MgId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("mg_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MgId"));

                    b.Property<DateTime>("Createat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Createby")
                        .HasColumnType("integer")
                        .HasColumnName("createby");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool?>("Isactive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("isactive")
                        .HasDefaultValueSql("true");

                    b.Property<string>("MgName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("mg_name");

                    b.Property<DateTime?>("Modifyat")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modifyat");

                    b.Property<int?>("Modifyby")
                        .HasColumnType("integer")
                        .HasColumnName("modifyby");

                    b.HasKey("MgId")
                        .HasName("modifiers_group_pkey");

                    b.HasIndex("Createby");

                    b.HasIndex("Modifyby");

                    b.HasIndex(new[] { "MgName" }, "modifiers_group_mg_name_key")
                        .IsUnique();

                    b.ToTable("modifiers_group");
                });

            modelBuilder.Entity("PMSData.Module", b =>
                {
                    b.Property<int>("ModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("module_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ModuleId"));

                    b.Property<DateTime>("Createat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Createby")
                        .HasColumnType("integer")
                        .HasColumnName("createby");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool?>("Isactive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("isactive")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("Modifyat")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modifyat");

                    b.Property<int?>("Modifyby")
                        .HasColumnType("integer")
                        .HasColumnName("modifyby");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("module_name");

                    b.HasKey("ModuleId")
                        .HasName("module_pkey");

                    b.HasIndex("Createby");

                    b.HasIndex("Modifyby");

                    b.HasIndex(new[] { "ModuleName" }, "module_module_name_key")
                        .IsUnique();

                    b.ToTable("module");
                });

            modelBuilder.Entity("PMSData.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderId"));

                    b.Property<DateTime>("Createat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Createby")
                        .HasColumnType("integer")
                        .HasColumnName("createby");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<bool>("DeliverOnTime")
                        .HasColumnType("boolean")
                        .HasColumnName("deliver_on_time");

                    b.Property<bool>("Iscontinued")
                        .HasColumnType("boolean")
                        .HasColumnName("iscontinued");

                    b.Property<DateTime?>("Modifyat")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modifyat");

                    b.Property<int?>("Modifyby")
                        .HasColumnType("integer")
                        .HasColumnName("modifyby");

                    b.Property<int>("NuOfPersons")
                        .HasColumnType("integer")
                        .HasColumnName("nu_of_persons");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.HasKey("OrderId")
                        .HasName("orders_pkey");

                    b.HasIndex("Createby");

                    b.HasIndex("CustomerId");

                    b.HasIndex("Modifyby");

                    b.HasIndex(new[] { "Status" }, "idx_orders_status");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("PMSData.OrderDetail", b =>
                {
                    b.Property<int>("OdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("od_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OdId"));

                    b.Property<DateTime>("Createdat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Createdby")
                        .HasColumnType("integer")
                        .HasColumnName("createdby");

                    b.Property<int[]>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("employee_id");

                    b.Property<int?>("FeedbackId")
                        .HasColumnType("integer")
                        .HasColumnName("feedback_id");

                    b.Property<bool?>("Iscontinued")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("iscontinued")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("Modifiedat")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modifiedat");

                    b.Property<int?>("Modifiedby")
                        .HasColumnType("integer")
                        .HasColumnName("modifiedby");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<int>("PaymentId")
                        .HasColumnType("integer")
                        .HasColumnName("payment_id");

                    b.Property<int[]>("TableId")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("table_id");

                    b.HasKey("OdId")
                        .HasName("order_details_pkey");

                    b.HasIndex("Createdby");

                    b.HasIndex("FeedbackId");

                    b.HasIndex("Modifiedby");

                    b.HasIndex("OrderId");

                    b.HasIndex("PaymentId");

                    b.ToTable("order_details");
                });

            modelBuilder.Entity("PMSData.OrderItemsList", b =>
                {
                    b.Property<int>("ItemsListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("items_list_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ItemsListId"));

                    b.Property<DateTime>("Createat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Createby")
                        .HasColumnType("integer")
                        .HasColumnName("createby");

                    b.Property<string>("ExtraComments")
                        .HasColumnType("text")
                        .HasColumnName("extra_comments");

                    b.Property<bool>("Iscontinued")
                        .HasColumnType("boolean")
                        .HasColumnName("iscontinued");

                    b.Property<int>("ItemModiferId")
                        .HasColumnType("integer")
                        .HasColumnName("item_modifer_id");

                    b.Property<DateTime?>("Modifyat")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modifyat");

                    b.Property<int?>("Modifyby")
                        .HasColumnType("integer")
                        .HasColumnName("modifyby");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<int>("PreparedItems")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("prepared_items")
                        .HasDefaultValueSql("1");

                    b.Property<decimal>("Prices")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("prices");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("ItemsListId")
                        .HasName("order_items_list_pkey");

                    b.HasIndex("Createby");

                    b.HasIndex("ItemModiferId");

                    b.HasIndex("Modifyby");

                    b.HasIndex("OrderId");

                    b.ToTable("order_items_list");
                });

            modelBuilder.Entity("PMSData.PaymentDetail", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("payment_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("ActualPrice")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("actual_price");

                    b.Property<DateTime>("Createat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("payment_method");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("payment_status")
                        .HasDefaultValueSql("'Pending'::character varying");

                    b.Property<int[]>("TaxId")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("tax_id");

                    b.Property<decimal>("TaxValue")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("tax_value");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)")
                        .HasColumnName("total_price");

                    b.HasKey("PaymentId")
                        .HasName("payment_details_pkey");

                    b.HasIndex(new[] { "OrderId" }, "idx_payments_order_id");

                    b.ToTable("payment_details");
                });

            modelBuilder.Entity("PMSData.Permission", b =>
                {
                    b.Property<int>("PId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("p_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PId"));

                    b.Property<bool>("CanCreateandedit")
                        .HasColumnType("boolean")
                        .HasColumnName("can_createandedit");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("can_delete");

                    b.Property<bool>("CanView")
                        .HasColumnType("boolean")
                        .HasColumnName("can_view");

                    b.Property<DateTime>("Createat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Createby")
                        .HasColumnType("integer")
                        .HasColumnName("createby");

                    b.Property<bool?>("Isactive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("isactive")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("Modifyat")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modifyat");

                    b.Property<int?>("Modifyby")
                        .HasColumnType("integer")
                        .HasColumnName("modifyby");

                    b.Property<int>("ModuleId")
                        .HasColumnType("integer")
                        .HasColumnName("module_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("PId")
                        .HasName("permissions_pkey");

                    b.HasIndex("Createby");

                    b.HasIndex("Modifyby");

                    b.HasIndex("ModuleId");

                    b.HasIndex("RoleId");

                    b.ToTable("permissions");
                });

            modelBuilder.Entity("PMSData.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("RefreshTokens_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("PMSData.ResetPasswordToken", b =>
                {
                    b.Property<int>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("TokenID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TokenId"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("IsContinue")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<string>("ResetToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userID");

                    b.HasKey("TokenId")
                        .HasName("ResetPasswordToken_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("ResetPasswordToken");
                });

            modelBuilder.Entity("PMSData.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleId"));

                    b.Property<DateTime>("Createdat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool?>("Isactive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("isactive")
                        .HasDefaultValueSql("true");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("role_name");

                    b.Property<DateTime?>("Updatedat")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedat");

                    b.HasKey("RoleId")
                        .HasName("roles_pkey");

                    b.HasIndex(new[] { "RoleName" }, "roles_role_name_key")
                        .IsUnique();

                    b.HasIndex(new[] { "RoleName" }, "uq_role_name")
                        .IsUnique();

                    b.ToTable("roles");
                });

            modelBuilder.Entity("PMSData.Section", b =>
                {
                    b.Property<int>("SectionId")
                        .HasColumnType("integer")
                        .HasColumnName("section_id");

                    b.Property<DateTime>("Createdat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Createdby")
                        .HasColumnType("integer")
                        .HasColumnName("createdby");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("Isdeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<DateTime?>("Modifiedat")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modifiedat");

                    b.Property<int?>("Modifiedby")
                        .HasColumnType("integer")
                        .HasColumnName("modifiedby");

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("section_name");

                    b.HasKey("SectionId")
                        .HasName("sections_pkey");

                    b.HasIndex("Createdby");

                    b.HasIndex("Modifiedby");

                    b.ToTable("sections");
                });

            modelBuilder.Entity("PMSData.StateList", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("state_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StateId"));

                    b.Property<int>("ContryId")
                        .HasColumnType("integer")
                        .HasColumnName("contry_id");

                    b.Property<TimeOnly>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("time without time zone")
                        .HasColumnName("createAT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer")
                        .HasColumnName("createBY");

                    b.Property<bool?>("IsContinue")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<TimeOnly?>("ModifyAt")
                        .HasColumnType("time without time zone")
                        .HasColumnName("modifyAT");

                    b.Property<int?>("ModifyBy")
                        .HasColumnType("integer")
                        .HasColumnName("modifyBY");

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("state_name");

                    b.HasKey("StateId")
                        .HasName("state_list_pkey");

                    b.HasIndex("ContryId");

                    b.HasIndex("CreateBy");

                    b.HasIndex("ModifyBy");

                    b.ToTable("state_list");
                });

            modelBuilder.Entity("PMSData.Table", b =>
                {
                    b.Property<int>("TableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("table_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TableId"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<DateTime>("Createat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Createby")
                        .HasColumnType("integer")
                        .HasColumnName("createby");

                    b.Property<bool>("Iscontinued")
                        .HasColumnType("boolean")
                        .HasColumnName("iscontinued");

                    b.Property<DateTime?>("Modifyat")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modifyat");

                    b.Property<int?>("Modifyby")
                        .HasColumnType("integer")
                        .HasColumnName("modifyby");

                    b.Property<int>("SectionId")
                        .HasColumnType("integer")
                        .HasColumnName("section_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("status");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("table_name");

                    b.HasKey("TableId")
                        .HasName("tables_pkey");

                    b.HasIndex("Createby");

                    b.HasIndex("Modifyby");

                    b.HasIndex("SectionId");

                    b.ToTable("tables");
                });

            modelBuilder.Entity("PMSData.Taxis", b =>
                {
                    b.Property<int>("TaxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tax_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TaxId"));

                    b.Property<DateTime>("Createat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Createby")
                        .HasColumnType("integer")
                        .HasColumnName("createby");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("Iscontinued")
                        .HasColumnType("boolean")
                        .HasColumnName("iscontinued");

                    b.Property<bool>("Isdefault")
                        .HasColumnType("boolean")
                        .HasColumnName("isdefault");

                    b.Property<bool?>("Isenabled")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("isenabled")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("Modifyat")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modifyat");

                    b.Property<int?>("Modifyby")
                        .HasColumnType("integer")
                        .HasColumnName("modifyby");

                    b.Property<string>("TaxName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("tax_name");

                    b.Property<string>("TaxType")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("tax_type");

                    b.Property<decimal>("TaxValue")
                        .HasPrecision(7, 3)
                        .HasColumnType("numeric(7,3)")
                        .HasColumnName("tax_value");

                    b.HasKey("TaxId")
                        .HasName("taxes_pkey");

                    b.HasIndex("Createby");

                    b.HasIndex("Modifyby");

                    b.ToTable("taxes");
                });

            modelBuilder.Entity("PMSData.Userauthentication", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("Createat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email_id");

                    b.Property<bool?>("Iscontinued")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("iscontinued")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("Modifyat")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modifyat");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("user_name");

                    b.HasKey("UserId")
                        .HasName("userauthentication_pkey");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "EmailId" }, "userauthentication_email_id_key")
                        .IsUnique();

                    b.ToTable("userauthentication");
                });

            modelBuilder.Entity("PMSData.Userdetail", b =>
                {
                    b.Property<int>("UserDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_details_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserDetailsId"));

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("address");

                    b.Property<int>("CityId")
                        .HasColumnType("integer")
                        .HasColumnName("city_id");

                    b.Property<int>("ContryId")
                        .HasColumnType("integer")
                        .HasColumnName("contry_id");

                    b.Property<int>("CreateBy")
                        .HasColumnType("integer")
                        .HasColumnName("createBY");

                    b.Property<DateTime>("Createat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<bool?>("Isactive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("isactive")
                        .HasDefaultValueSql("true");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<int?>("ModifyBy")
                        .HasColumnType("integer")
                        .HasColumnName("modifyBY");

                    b.Property<DateTime?>("Modifyat")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modifyat");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("phone_number");

                    b.Property<byte[]>("PhotoData")
                        .HasColumnType("bytea")
                        .HasColumnName("photo_data");

                    b.Property<int>("StateId")
                        .HasColumnType("integer")
                        .HasColumnName("state_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("zip_code");

                    b.HasKey("UserDetailsId")
                        .HasName("userdetails_pkey");

                    b.HasIndex("CityId");

                    b.HasIndex("ContryId");

                    b.HasIndex("CreateBy");

                    b.HasIndex("ModifyBy");

                    b.HasIndex("StateId");

                    b.HasIndex("UserId");

                    b.ToTable("userdetails");
                });

            modelBuilder.Entity("PMSData.WaitingList", b =>
                {
                    b.Property<int>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("token_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TokenId"));

                    b.Property<DateTime>("Createat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Createby")
                        .HasColumnType("integer")
                        .HasColumnName("createby");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<bool?>("Isactive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("isactive")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("Modifyat")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modifyat");

                    b.Property<int?>("Modifyby")
                        .HasColumnType("integer")
                        .HasColumnName("modifyby");

                    b.Property<short>("PriorityLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("priority_level")
                        .HasDefaultValueSql("2");

                    b.Property<string>("Remarks")
                        .HasColumnType("text")
                        .HasColumnName("remarks");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.Property<string>("WaitingTime")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("waiting_time");

                    b.HasKey("TokenId")
                        .HasName("waiting_list_pkey");

                    b.HasIndex("Createby");

                    b.HasIndex("CustomerId");

                    b.HasIndex("Modifyby");

                    b.ToTable("waiting_list");
                });

            modelBuilder.Entity("PMSData.AuditLog", b =>
                {
                    b.HasOne("PMSData.Userauthentication", "CretaeByNavigation")
                        .WithMany("AuditLogCretaeByNavigations")
                        .HasForeignKey("CretaeBy")
                        .IsRequired()
                        .HasConstraintName("fk_kot_createby");

                    b.HasOne("PMSData.Userauthentication", "ModifyByNavigation")
                        .WithMany("AuditLogModifyByNavigations")
                        .HasForeignKey("ModifyBy")
                        .HasConstraintName("fk_kot_modifyby");

                    b.Navigation("CretaeByNavigation");

                    b.Navigation("ModifyByNavigation");
                });

            modelBuilder.Entity("PMSData.Category", b =>
                {
                    b.HasOne("PMSData.Userauthentication", "CreatebyNavigation")
                        .WithMany("CategoryCreatebyNavigations")
                        .HasForeignKey("Createby")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_category_createby");

                    b.HasOne("PMSData.Userauthentication", "ModifybyNavigation")
                        .WithMany("CategoryModifybyNavigations")
                        .HasForeignKey("Modifyby")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_category_modifyby");

                    b.Navigation("CreatebyNavigation");

                    b.Navigation("ModifybyNavigation");
                });

            modelBuilder.Entity("PMSData.CityList", b =>
                {
                    b.HasOne("PMSData.Userauthentication", "CreateByNavigation")
                        .WithMany("CityListCreateByNavigations")
                        .HasForeignKey("CreateBy")
                        .IsRequired()
                        .HasConstraintName("fk_city_row_createby");

                    b.HasOne("PMSData.Userauthentication", "ModifyByNavigation")
                        .WithMany("CityListModifyByNavigations")
                        .HasForeignKey("ModifyBy")
                        .HasConstraintName("fk_city_row_modifyby");

                    b.HasOne("PMSData.StateList", "State")
                        .WithMany("CityLists")
                        .HasForeignKey("StateId")
                        .IsRequired()
                        .HasConstraintName("fk_state_id");

                    b.Navigation("CreateByNavigation");

                    b.Navigation("ModifyByNavigation");

                    b.Navigation("State");
                });

            modelBuilder.Entity("PMSData.ContryList", b =>
                {
                    b.HasOne("PMSData.Userauthentication", "CreateByNavigation")
                        .WithMany("ContryListCreateByNavigations")
                        .HasForeignKey("CreateBy")
                        .IsRequired()
                        .HasConstraintName("fk_contry_row_createby");

                    b.HasOne("PMSData.Userauthentication", "ModifyByNavigation")
                        .WithMany("ContryListModifyByNavigations")
                        .HasForeignKey("ModifyBy")
                        .HasConstraintName("fk_contry_row_modifyby");

                    b.Navigation("CreateByNavigation");

                    b.Navigation("ModifyByNavigation");
                });

            modelBuilder.Entity("PMSData.FavoritesItem", b =>
                {
                    b.HasOne("PMSData.Item", "Item")
                        .WithMany("FavoritesItems")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("favorites_items_item_id_fkey");

                    b.HasOne("PMSData.Userauthentication", "User")
                        .WithMany("FavoritesItems")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("favorites_items_user_id_fkey");

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PMSData.FeedbackForm", b =>
                {
                    b.HasOne("PMSData.Order", "Order")
                        .WithMany("FeedbackForms")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("feedback_form_order_id_fkey");

                    b.HasOne("PMSData.Userauthentication", "User")
                        .WithMany("FeedbackForms")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("feedback_form_user_id_fkey");

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PMSData.Invoice", b =>
                {
                    b.HasOne("PMSData.Userauthentication", "CreateByNavigation")
                        .WithMany("InvoiceCreateByNavigations")
                        .HasForeignKey("CreateBy")
                        .IsRequired()
                        .HasConstraintName("fk_invoice_createby");

                    b.HasOne("PMSData.Userauthentication", "ModifyByNavigation")
                        .WithMany("InvoiceModifyByNavigations")
                        .HasForeignKey("ModifyBy")
                        .HasConstraintName("fk_invoice_modifyby");

                    b.HasOne("PMSData.Order", "Order")
                        .WithMany("Invoices")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("fk_order_id");

                    b.Navigation("CreateByNavigation");

                    b.Navigation("ModifyByNavigation");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("PMSData.Item", b =>
                {
                    b.HasOne("PMSData.Category", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_items_category");

                    b.HasOne("PMSData.Userauthentication", "CreatebyNavigation")
                        .WithMany("ItemCreatebyNavigations")
                        .HasForeignKey("Createby")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_items_createby");

                    b.HasOne("PMSData.Userauthentication", "ModifybyNavigation")
                        .WithMany("ItemModifybyNavigations")
                        .HasForeignKey("Modifyby")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_items_modifyby");

                    b.Navigation("Category");

                    b.Navigation("CreatebyNavigation");

                    b.Navigation("ModifybyNavigation");
                });

            modelBuilder.Entity("PMSData.ItemModifier", b =>
                {
                    b.HasOne("PMSData.Item", "Item")
                        .WithMany("ItemModifiers")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_item_modifiers_item");

                    b.HasOne("PMSData.Modifier", "MIdNavigation")
                        .WithMany("ItemModifiers")
                        .HasForeignKey("MId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_item_modifiers_modifier");

                    b.Navigation("Item");

                    b.Navigation("MIdNavigation");
                });

            modelBuilder.Entity("PMSData.Modifier", b =>
                {
                    b.HasOne("PMSData.Userauthentication", "CreatebyNavigation")
                        .WithMany("ModifierCreatebyNavigations")
                        .HasForeignKey("Createby")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_modifiers_createby");

                    b.HasOne("PMSData.ModifiersGroup", "Mg")
                        .WithMany("Modifiers")
                        .HasForeignKey("MgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_modifiers_group");

                    b.HasOne("PMSData.Userauthentication", "ModifybyNavigation")
                        .WithMany("ModifierModifybyNavigations")
                        .HasForeignKey("Modifyby")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_modifiers_modifyby");

                    b.Navigation("CreatebyNavigation");

                    b.Navigation("Mg");

                    b.Navigation("ModifybyNavigation");
                });

            modelBuilder.Entity("PMSData.ModifiersGroup", b =>
                {
                    b.HasOne("PMSData.Userauthentication", "CreatebyNavigation")
                        .WithMany("ModifiersGroupCreatebyNavigations")
                        .HasForeignKey("Createby")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_modifiers_createby");

                    b.HasOne("PMSData.Userauthentication", "ModifybyNavigation")
                        .WithMany("ModifiersGroupModifybyNavigations")
                        .HasForeignKey("Modifyby")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_modifiers_modifyby");

                    b.Navigation("CreatebyNavigation");

                    b.Navigation("ModifybyNavigation");
                });

            modelBuilder.Entity("PMSData.Module", b =>
                {
                    b.HasOne("PMSData.Userauthentication", "CreatebyNavigation")
                        .WithMany("ModuleCreatebyNavigations")
                        .HasForeignKey("Createby")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_module_createby");

                    b.HasOne("PMSData.Userauthentication", "ModifybyNavigation")
                        .WithMany("ModuleModifybyNavigations")
                        .HasForeignKey("Modifyby")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_module_modifyby");

                    b.Navigation("CreatebyNavigation");

                    b.Navigation("ModifybyNavigation");
                });

            modelBuilder.Entity("PMSData.Order", b =>
                {
                    b.HasOne("PMSData.Userauthentication", "CreatebyNavigation")
                        .WithMany("OrderCreatebyNavigations")
                        .HasForeignKey("Createby")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_orders_createby");

                    b.HasOne("PMSData.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_orders_customer");

                    b.HasOne("PMSData.Userauthentication", "ModifybyNavigation")
                        .WithMany("OrderModifybyNavigations")
                        .HasForeignKey("Modifyby")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_orders_modifyby");

                    b.Navigation("CreatebyNavigation");

                    b.Navigation("Customer");

                    b.Navigation("ModifybyNavigation");
                });

            modelBuilder.Entity("PMSData.OrderDetail", b =>
                {
                    b.HasOne("PMSData.Userauthentication", "CreatedbyNavigation")
                        .WithMany("OrderDetailCreatedbyNavigations")
                        .HasForeignKey("Createdby")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_created_by");

                    b.HasOne("PMSData.FeedbackForm", "Feedback")
                        .WithMany("OrderDetails")
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_feedback");

                    b.HasOne("PMSData.Userauthentication", "ModifiedbyNavigation")
                        .WithMany("OrderDetailModifiedbyNavigations")
                        .HasForeignKey("Modifiedby")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_modified_by");

                    b.HasOne("PMSData.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order");

                    b.HasOne("PMSData.PaymentDetail", "Payment")
                        .WithMany("OrderDetails")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_payment");

                    b.Navigation("CreatedbyNavigation");

                    b.Navigation("Feedback");

                    b.Navigation("ModifiedbyNavigation");

                    b.Navigation("Order");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("PMSData.OrderItemsList", b =>
                {
                    b.HasOne("PMSData.Userauthentication", "CreatebyNavigation")
                        .WithMany("OrderItemsListCreatebyNavigations")
                        .HasForeignKey("Createby")
                        .IsRequired()
                        .HasConstraintName("order_items_list_createby_fkey");

                    b.HasOne("PMSData.ItemModifier", "ItemModifer")
                        .WithMany("OrderItemsLists")
                        .HasForeignKey("ItemModiferId")
                        .IsRequired()
                        .HasConstraintName("order_item_and_modifiers_list_item_modifier_id_fkey");

                    b.HasOne("PMSData.Userauthentication", "ModifybyNavigation")
                        .WithMany("OrderItemsListModifybyNavigations")
                        .HasForeignKey("Modifyby")
                        .HasConstraintName("order_items_list_modifyby_fkey");

                    b.HasOne("PMSData.Order", "Order")
                        .WithMany("OrderItemsLists")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("order_items_list_order_id_fkey");

                    b.Navigation("CreatebyNavigation");

                    b.Navigation("ItemModifer");

                    b.Navigation("ModifybyNavigation");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("PMSData.PaymentDetail", b =>
                {
                    b.HasOne("PMSData.Order", "Order")
                        .WithMany("PaymentDetails")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("payment_details_order_id_fkey");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("PMSData.Permission", b =>
                {
                    b.HasOne("PMSData.Userauthentication", "CreatebyNavigation")
                        .WithMany("PermissionCreatebyNavigations")
                        .HasForeignKey("Createby")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_permissions_createby");

                    b.HasOne("PMSData.Userauthentication", "ModifybyNavigation")
                        .WithMany("PermissionModifybyNavigations")
                        .HasForeignKey("Modifyby")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_permissions_modifyby");

                    b.HasOne("PMSData.Module", "Module")
                        .WithMany("Permissions")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_permissions_module");

                    b.HasOne("PMSData.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_permissions_role");

                    b.Navigation("CreatebyNavigation");

                    b.Navigation("ModifybyNavigation");

                    b.Navigation("Module");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("PMSData.RefreshToken", b =>
                {
                    b.HasOne("PMSData.Userauthentication", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_RefreshTokens_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PMSData.ResetPasswordToken", b =>
                {
                    b.HasOne("PMSData.Userauthentication", "User")
                        .WithMany("ResetPasswordTokens")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("User ID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PMSData.Section", b =>
                {
                    b.HasOne("PMSData.Userauthentication", "CreatedbyNavigation")
                        .WithMany("SectionCreatedbyNavigations")
                        .HasForeignKey("Createdby")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_sections_createdby");

                    b.HasOne("PMSData.Userauthentication", "ModifiedbyNavigation")
                        .WithMany("SectionModifiedbyNavigations")
                        .HasForeignKey("Modifiedby")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_sections_modifiedby");

                    b.Navigation("CreatedbyNavigation");

                    b.Navigation("ModifiedbyNavigation");
                });

            modelBuilder.Entity("PMSData.StateList", b =>
                {
                    b.HasOne("PMSData.ContryList", "Contry")
                        .WithMany("StateLists")
                        .HasForeignKey("ContryId")
                        .IsRequired()
                        .HasConstraintName("fk_contry_id");

                    b.HasOne("PMSData.Userauthentication", "CreateByNavigation")
                        .WithMany("StateListCreateByNavigations")
                        .HasForeignKey("CreateBy")
                        .IsRequired()
                        .HasConstraintName("fk_state_row_createby");

                    b.HasOne("PMSData.Userauthentication", "ModifyByNavigation")
                        .WithMany("StateListModifyByNavigations")
                        .HasForeignKey("ModifyBy")
                        .HasConstraintName("fk_state_row_modifyby");

                    b.Navigation("Contry");

                    b.Navigation("CreateByNavigation");

                    b.Navigation("ModifyByNavigation");
                });

            modelBuilder.Entity("PMSData.Table", b =>
                {
                    b.HasOne("PMSData.Userauthentication", "CreatebyNavigation")
                        .WithMany("TableCreatebyNavigations")
                        .HasForeignKey("Createby")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_tables_createby");

                    b.HasOne("PMSData.Userauthentication", "ModifybyNavigation")
                        .WithMany("TableModifybyNavigations")
                        .HasForeignKey("Modifyby")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_tables_modifyby");

                    b.HasOne("PMSData.Section", "Section")
                        .WithMany("Tables")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tables_section");

                    b.Navigation("CreatebyNavigation");

                    b.Navigation("ModifybyNavigation");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("PMSData.Taxis", b =>
                {
                    b.HasOne("PMSData.Userauthentication", "CreatebyNavigation")
                        .WithMany("TaxisCreatebyNavigations")
                        .HasForeignKey("Createby")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_taxes_createby");

                    b.HasOne("PMSData.Userauthentication", "ModifybyNavigation")
                        .WithMany("TaxisModifybyNavigations")
                        .HasForeignKey("Modifyby")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_taxes_modifyby");

                    b.Navigation("CreatebyNavigation");

                    b.Navigation("ModifybyNavigation");
                });

            modelBuilder.Entity("PMSData.Userauthentication", b =>
                {
                    b.HasOne("PMSData.Role", "Role")
                        .WithMany("Userauthentications")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("PMSData.Userdetail", b =>
                {
                    b.HasOne("PMSData.CityList", "City")
                        .WithMany("Userdetails")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_city_id");

                    b.HasOne("PMSData.ContryList", "Contry")
                        .WithMany("Userdetails")
                        .HasForeignKey("ContryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_contry_id");

                    b.HasOne("PMSData.Userauthentication", "CreateByNavigation")
                        .WithMany("UserdetailCreateByNavigations")
                        .HasForeignKey("CreateBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_createby");

                    b.HasOne("PMSData.Userauthentication", "ModifyByNavigation")
                        .WithMany("UserdetailModifyByNavigations")
                        .HasForeignKey("ModifyBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_user_modifyby");

                    b.HasOne("PMSData.StateList", "State")
                        .WithMany("Userdetails")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_state_id");

                    b.HasOne("PMSData.Userauthentication", "User")
                        .WithMany("UserdetailUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_user");

                    b.Navigation("City");

                    b.Navigation("Contry");

                    b.Navigation("CreateByNavigation");

                    b.Navigation("ModifyByNavigation");

                    b.Navigation("State");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PMSData.WaitingList", b =>
                {
                    b.HasOne("PMSData.Userauthentication", "CreatebyNavigation")
                        .WithMany("WaitingListCreatebyNavigations")
                        .HasForeignKey("Createby")
                        .IsRequired()
                        .HasConstraintName("waiting_list_createby_fkey");

                    b.HasOne("PMSData.Customer", "Customer")
                        .WithMany("WaitingLists")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("waiting_list_customer_id_fkey");

                    b.HasOne("PMSData.Userauthentication", "ModifybyNavigation")
                        .WithMany("WaitingListModifybyNavigations")
                        .HasForeignKey("Modifyby")
                        .HasConstraintName("waiting_list_modifyby_fkey");

                    b.Navigation("CreatebyNavigation");

                    b.Navigation("Customer");

                    b.Navigation("ModifybyNavigation");
                });

            modelBuilder.Entity("PMSData.Category", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("PMSData.CityList", b =>
                {
                    b.Navigation("Userdetails");
                });

            modelBuilder.Entity("PMSData.ContryList", b =>
                {
                    b.Navigation("StateLists");

                    b.Navigation("Userdetails");
                });

            modelBuilder.Entity("PMSData.Customer", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("WaitingLists");
                });

            modelBuilder.Entity("PMSData.FeedbackForm", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("PMSData.Item", b =>
                {
                    b.Navigation("FavoritesItems");

                    b.Navigation("ItemModifiers");
                });

            modelBuilder.Entity("PMSData.ItemModifier", b =>
                {
                    b.Navigation("OrderItemsLists");
                });

            modelBuilder.Entity("PMSData.Modifier", b =>
                {
                    b.Navigation("ItemModifiers");
                });

            modelBuilder.Entity("PMSData.ModifiersGroup", b =>
                {
                    b.Navigation("Modifiers");
                });

            modelBuilder.Entity("PMSData.Module", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("PMSData.Order", b =>
                {
                    b.Navigation("FeedbackForms");

                    b.Navigation("Invoices");

                    b.Navigation("OrderDetails");

                    b.Navigation("OrderItemsLists");

                    b.Navigation("PaymentDetails");
                });

            modelBuilder.Entity("PMSData.PaymentDetail", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("PMSData.Role", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("Userauthentications");
                });

            modelBuilder.Entity("PMSData.Section", b =>
                {
                    b.Navigation("Tables");
                });

            modelBuilder.Entity("PMSData.StateList", b =>
                {
                    b.Navigation("CityLists");

                    b.Navigation("Userdetails");
                });

            modelBuilder.Entity("PMSData.Userauthentication", b =>
                {
                    b.Navigation("AuditLogCretaeByNavigations");

                    b.Navigation("AuditLogModifyByNavigations");

                    b.Navigation("CategoryCreatebyNavigations");

                    b.Navigation("CategoryModifybyNavigations");

                    b.Navigation("CityListCreateByNavigations");

                    b.Navigation("CityListModifyByNavigations");

                    b.Navigation("ContryListCreateByNavigations");

                    b.Navigation("ContryListModifyByNavigations");

                    b.Navigation("FavoritesItems");

                    b.Navigation("FeedbackForms");

                    b.Navigation("InvoiceCreateByNavigations");

                    b.Navigation("InvoiceModifyByNavigations");

                    b.Navigation("ItemCreatebyNavigations");

                    b.Navigation("ItemModifybyNavigations");

                    b.Navigation("ModifierCreatebyNavigations");

                    b.Navigation("ModifierModifybyNavigations");

                    b.Navigation("ModifiersGroupCreatebyNavigations");

                    b.Navigation("ModifiersGroupModifybyNavigations");

                    b.Navigation("ModuleCreatebyNavigations");

                    b.Navigation("ModuleModifybyNavigations");

                    b.Navigation("OrderCreatebyNavigations");

                    b.Navigation("OrderDetailCreatedbyNavigations");

                    b.Navigation("OrderDetailModifiedbyNavigations");

                    b.Navigation("OrderItemsListCreatebyNavigations");

                    b.Navigation("OrderItemsListModifybyNavigations");

                    b.Navigation("OrderModifybyNavigations");

                    b.Navigation("PermissionCreatebyNavigations");

                    b.Navigation("PermissionModifybyNavigations");

                    b.Navigation("RefreshTokens");

                    b.Navigation("ResetPasswordTokens");

                    b.Navigation("SectionCreatedbyNavigations");

                    b.Navigation("SectionModifiedbyNavigations");

                    b.Navigation("StateListCreateByNavigations");

                    b.Navigation("StateListModifyByNavigations");

                    b.Navigation("TableCreatebyNavigations");

                    b.Navigation("TableModifybyNavigations");

                    b.Navigation("TaxisCreatebyNavigations");

                    b.Navigation("TaxisModifybyNavigations");

                    b.Navigation("UserdetailCreateByNavigations");

                    b.Navigation("UserdetailModifyByNavigations");

                    b.Navigation("UserdetailUsers");

                    b.Navigation("WaitingListCreatebyNavigations");

                    b.Navigation("WaitingListModifybyNavigations");
                });
#pragma warning restore 612, 618
        }
    }
}
